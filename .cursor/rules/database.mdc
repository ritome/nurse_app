---
alwaysApply: true
---

# データベースルール

## テーブル定義

## シーディング



employee_id（職員ID。文字列ユニーク）

full_name（氏名）

role（役割。ENUMあるいはVARCHAR。初期は "new_nurse" 相当）

hire_date（入職日。後のリマインダー計算に使用）

論理削除（softDeletes）を有効化

退会（自分のアカウント削除）機能を用意。管理者はユーザー削除も可能にするが、この段階ではUI露出は最小限でOK。

Volt/Livewireのビルド・ルーティング・レイアウト整備（ダッシュボード仮ページへ遷移）まで。
受け入れ基準：

新規登録→メール確認（任意）→ログイン→ログアウトが動く。

自分のアカウントを削除できる（確認ダイアログ含む）。

DBにemployee_id/full_name/role/hire_dateが保存される。

php artisan test 等の基本テストが通る（最低限のFeatureテストを自動生成）。


役割（ロール）設計と最低限の権限制御

目的：承認ワークフローで必要な「役職者」権限を先に定義しておく。
やること（指示）：

役割候補を定義：new_nurse（新入看護職員）, partner_nurse（パートナー看護師）, educator（教育係）, chief（主任）, manager_safety（課長_医療安全）, manager_infection（課長_感染制御）, manager_hrd（課長_人材育成）, director（部長）など。複数ロールを将来付与できる設計（単一カラム文字列でもよいが、拡張が容易な実装に）。

シーディングで開発用ユーザーを作成（サンプル：各役職1名＋新入看護職員2名）。

権限制御の方針：Gate またはポリシーで「自分の記録のみ編集可」「承認は該当役職のみ可」を形にするためのベースを用意。
受け入れ基準：

シード実行で各ロールのダミーアカウントが作られる。

ログインユーザーのロールに応じて「承認UI（仮）」が出たり消えたりする最小限の制御が効いている（実処理はまだダミーでOK）。
