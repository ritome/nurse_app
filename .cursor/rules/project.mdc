---
alwaysApply: true
---

# プロジェクトルール

## 概要

新入看護職員育成プログラムアプリ

プロンプト1：プロジェクト準備とログイン（認証）基盤

目的：Laravel + Sail + Volt 構成を前提に、認証（新規登録・ログイン・ログアウト・退会/削除）を最小構成で用意。
やること（指示）：

既存のLaravelプロジェクトで、Docker(Sail)とDBを起動できる状態にしておく（.envのDB設定・sail up -d・artisan migrateなどの実行コマンドを自動生成＆追記）。

認証スキャフォールドを導入（Livewire/Voltスタックを利用）。メール検証やパスワード再設定など最低限の動線も含める。

usersテーブルに以下のカラムを追加（マイグレーション作成・適用）：

employee_id（職員ID。文字列ユニーク）

full_name（氏名）

role（役割。ENUMあるいはVARCHAR。初期は "new_nurse" 相当）

hire_date（入職日。後のリマインダー計算に使用）

論理削除（softDeletes）を有効化

退会（自分のアカウント削除）機能を用意。管理者はユーザー削除も可能にするが、この段階ではUI露出は最小限でOK。

Volt/Livewireのビルド・ルーティング・レイアウト整備（ダッシュボード仮ページへ遷移）まで。
受け入れ基準：

新規登録→メール確認（任意）→ログイン→ログアウトが動く。

自分のアカウントを削除できる（確認ダイアログ含む）。

DBにemployee_id/full_name/role/hire_dateが保存される。

php artisan test 等の基本テストが通る（最低限のFeatureテストを自動生成）。

プロンプト2：役割（ロール）設計と最低限の権限制御

目的：承認ワークフローで必要な「役職者」権限を先に定義しておく。
やること（指示）：

役割候補を定義：new_nurse（新入看護職員）, partner_nurse（パートナー看護師）, educator（教育係）, chief（主任）, manager_safety（課長_医療安全）, manager_infection（課長_感染制御）, manager_hrd（課長_人材育成）, director（部長）など。複数ロールを将来付与できる設計（単一カラム文字列でもよいが、拡張が容易な実装に）。

シーディングで開発用ユーザーを作成（サンプル：各役職1名＋新入看護職員2名）。

権限制御の方針：Gate またはポリシーで「自分の記録のみ編集可」「承認は該当役職のみ可」を形にするためのベースを用意。
受け入れ基準：

シード実行で各ロールのダミーアカウントが作られる。

ログインユーザーのロールに応じて「承認UI（仮）」が出たり消えたりする最小限の制御が効いている（実処理はまだダミーでOK）。

プロンプト3：ログイン後の「一覧ページ」骨格

目的：ログイン直後に「自分の基本情報」と「各章への入口」を一覧で見せる。
やること（指示）：

ダッシュボードに以下を表示：

自分の「職員ID」「氏名」「役職名（ロール）」。

章のメニュー：

新入看護職員育成プログラム（チェックリスト）

新入看護職員用 振り返りシート（節目ごとの面談・承認）

日々の振り返り記録（毎日の記録＋コメント）

Voltコンポーネントで各章に遷移するカード/リンクを配置。
受け入れ基準：

ログインユーザーに応じて氏名・役職が出る。

各章リンクをクリックで該当画面（まだ空）に遷移。

プロンプト4：チェックリスト（「育成プログラム」章）のデータ設計とUI

目的：ワード雛形にある必須経験事項等を「チェックボックス＋達成日」付きで管理。
やること（指示）：

エンティティ設計：

program_items（マスタ）：カテゴリ（例：栄養ケア/清潔ケア/排泄ケア/ADL/フィジカルアセスメント/検査/処置/治療/診療補助/その他など）、項目名、説明、並び順。

program_checks（ユーザー別記録）：user_id、program_item_id、checked_at（日付）、note（任意メモ）。

まずは代表カテゴリ＋項目を10〜20件ほどサンプル登録（後で増やす）。チェック時に日付を自動入力、手動修正も可。

一覧UI：カテゴリごとにグルーピング表示。チェック/未チェックのフィルタ・並び替え。

資料反映：育成プログラムの到達目標や業務区分など、章立て・カテゴリ設計の参考に（文言は短文化してUIに収まる形に）。
受け入れ基準：

項目にチェックを入れると即時（Livewire）保存、checked_atが記録される。

再度外す → checked_atがnullになる。

ユーザーごとに独立して管理される。

プロンプト5：「振り返りシート」章の節目スケジュールと記入・承認フロー（下書き）

目的：**入職日からの節目（1週・2週・3週・4週・2か月(前半/後半)・3〜11か月・1年）**で振り返りを作成→面談記録→各役職者の承認という流れを表現。
やること（指示）：

エンティティ設計：

milestones：キー（week_1, week_2, … year_1 等）、名称、相対日数（入職日からのオフセット）。

reviews：user_id、milestone_id、content（所定の設問を複数フィールドで保持しても良い）、status（draft/submitted/approved_partially/approved_all など）。

review_approvals：review_id、approver_user_id、role、approved_at、comment。

資料反映：節目の粒度・設問の方向性・承認者欄（部長・課長×3・主任×2・教育係・パートナー）をモデル/画面に準備。まずは入力→提出→承認（ロール別）を1本通す。

UI：節目リスト（期限・ステータス表示）→詳細画面で入力→「提出」→承認者は「承認/差戻し」ボタンとコメント欄。
受け入れ基準：

入職日からの自動計算で「次の振り返りが近い」バッジが出る。

新入看護職員は自分の節目に入力・提出できる。

役職者は該当レビューに承認操作ができ、承認履歴が残る。

プロンプト6：リマインダー（通知）設計

目的：節目や承認待ちを自動でお知らせする。
やること（指示）：

リマインド対象：

新入看護職員：節目前（例：3日前/当日）に「振り返りをしましょう」の通知。

承認者：提出後に「あなたの承認待ちがあります」の通知。ログイン時にも未処理件数をバッジ表示。

実装：

スケジューラ（schedule()）で毎日チェック。DEVはDB通知中心、メールは環境変数で有効化できる設計。

通知テーブル or 既存のLaravel Notificationsを利用。
受け入れ基準：

php artisan schedule:run 相当の実行で、期日到来/承認待ちの通知が登録される。

ダッシュボードに未処理数バッジが出る。

プロンプト7：「日々の振り返り記録」章（毎日の実施＋困りごと＋コメント）

目的：毎日の「実施内容」「困りごと・疑問・課題」「ペア看護師コメント」を1画面で扱えるようにする。
やること（指示）：

エンティティ設計：

daily_notes：user_id、date、content（実施内容）、issue（困りごと/疑問/課題）など。

daily_comments：daily_note_id、commenter_id、comment、is_partner_of_the_day（当日の担当者フラグ）。

UI/権限：

新入看護職員が当日の記録を保存後、その日の担当看護師（交代制）も含め、看護師がコメント可能。

同一画面で「記録」と「コメントのスレッド」を時系列表示。

資料反映：元の紙様式のレイアウトに近い見せ方（列：月日/実施内容/困りごと/コメント）を意識。
受け入れ基準：

当日の記録作成→別アカウント（パートナー/担当者）でコメント→即時表示が可能。

自分の記録は自分だけが編集できる（コメントは権限者のみ）。

プロンプト8：承認ダッシュボード＆アクセス制御の厳密化

目的：役職者が自分の承認待ちを効率よく処理できる画面を用意し、アクセス制御を堅くする。
やること（指示）：

役職者ダッシュボード：自分が承認すべきレビューの一覧、検索/フィルタ、未承認数。

ポリシー/Gateの整備：URL直叩き禁止、他人のレビュー編集不可、承認順序（任意/並列）を定義。

監査ログ（活動ログ）を軽く導入（批准・差戻し・編集の履歴）。
受け入れ基準：

権限外ユーザーが承認画面へアクセスしようとすると拒否。

役職者は自分の対象のみ見える。操作履歴が記録される。

プロンプト9：雛形項目のインポートと表示最適化

目的：Word雛形の具体項目（チェックリスト、設問、承認欄ラベルなど）をアプリのマスタへ投入し、UIの文言を整える。
やること（指示）：

3つの雛形（育成プログラム／振り返りシート／日々の記録）から、実アプリで使う項目群をJSONシードとして整理・登録する仕組みを作る（Seeder or コマンド）。

ラベル・設問文をUI向けに簡潔化。出典は内部メモに保持。

掲載が長い箇所は折りたたみUI、モバイル閲覧の行間・余白も調整。
受け入れ基準：

Seeder/コマンドにより一括投入→画面に反映。

モバイル幅での可読性が高い。

（参考：育成プログラムの業務・必須経験事項・到達目標、面談頻度やサポート体制の説明など。／節目・設問・承認欄の構造。／日々の記録フォーマットの列構成。）

プロンプト10：最終仕上げ（通知のUX・一覧の並び・検索・エクスポート）

目的：現場で使いやすくする最終磨き。
やること（指示）：

通知のUX：ベルアイコン、未読/既読、設定（メールON/OFF）。

一覧の並び：節目は期限順、チェックリストは未達優先、日々の記録は新しい順。

検索/フィルタ：期間・カテゴリ・承認状態など。

エクスポート：レビュー単票のPDF出力（簡易で可）。
受け入れ基準：

主要画面の一覧が直感的に使える。

通知と承認が滞りなく回る。

PDF出力で面談記録を院内共有に回せる。
